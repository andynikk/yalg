/*
	https://contest.yandex.ru/contest/23815/run-report/110177404/

-- ПРИНЦИП РАБОТЫ --
	Сразу отрабатываются варианты когда длинна массива 0, 1 или 2.
Я решил найти индекс элемента с наименьшим значением. Реализовал это бинарным поиском. Создал указатели left И right.
Получаю середину от суммы left И right. Если элемент середины скньше предыдущего элемента, то это и есть индекс элемента с наименьшим значением.
Иначе увеличиваю left или уменьшаю right в зависимости от того какой элемент больше.
	После того, как я нашел индекс минимального значения, я проверил в какой части от минимального значения лежит искомое значение.
Реализовал механизм как в поиске индекса минимального значения, только средний элемент сравнивал не с предыдущим, а с заданным значением.
Если не равен, то увеличиваю left или уменьшаю right в зависимости от того какой̆ элемент больше.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Из описания алгоритма следует, что элемент с необходимым значением находится. Если искомое значение отсутствует, то возвращается -1

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Поиск индекса элемента O(log N) где N это количество элементов массива, я не обхожу весь массив.
Я дважды обхожу массив, но с каждым шагом я беру только половину от полученного подмассива.

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Т.к. никаких действий с массивом я не делаю, то в памяти будет занимать n элементов массива и манятся не будет.

*/

package sprint3

func brokenSearchV2(arr []int, k int) int {
	if len(arr) == 0 {
		return -1
	}
	if len(arr) == 1 {
		if arr[0] == k {
			return 0
		}
		return -1
	}
	if len(arr) == 2 {
		if arr[0] == k {
			return 0
		} else if arr[1] == k {
			return 1
		}
		return -1
	}

	//Определяю индекс минимального значения
	middle := -1
	left, right := 0, len(arr)-1
	for left < right {
		middle = (left + right) / 2

		if middle-1 >= 0 && arr[middle] < arr[middle-1] {
			break
		}
		if arr[middle] >= arr[0] {
			left = middle + 1
			continue
		}

		right = middle
	}
	left, right = 0, middle

	//определяяю в какой части массива от минимального значения искомое значение
	leftPart := k >= min(arr[0], arr[middle-1]) && k <= max(arr[0], arr[middle-1])
	if !leftPart {
		left, right = middle, len(arr)
	}

	for left < right {
		middle = (left + right) / 2

		if arr[middle] == k {
			break
		}

		if arr[middle] < k {
			left = middle + 1
			continue
		}

		right = middle
	}

	if arr[middle] != k {
		return -1
	}
	return middle
}

func testFinal1V2() {
	arr := []int{19, 21, 100, 101, 1, 4, 5, 7, 12}
	if brokenSearchV2(arr, 5) != 6 {
		println("test 1 error")
	} else {
		println("test 1 OK")
	}

	arr = []int{5, 1}
	if brokenSearchV2(arr, 1) != 1 {
		println("test 2 error")
	} else {
		println("test 2 OK")
	}

	arr = []int{3, 5, 6, 7, 9, 1, 2}
	if brokenSearchV2(arr, 4) != -1 {
		println("test 3 error")
	} else {
		println("test 3 OK")
	}

	arr = []int{3, 6, 7}
	if brokenSearchV2(arr, 8) != -1 {
		println("test 4 error")
	} else {
		println("test 4 OK")
	}

	arr = []int{8158, 8164, 8228, 8296, 8394, 8426, 8719, 8728, 9182, 9220, 9388, 9453, 9512, 9544, 9962, 37, 265, 392, 444, 519, 549, 649, 910, 999, 1056, 1090, 1211, 1429, 1526, 1628, 1688, 1694, 1733, 1816, 1994, 2039, 2290, 2335, 2389, 2667, 2690, 2748, 2799, 2831, 2905, 2927, 2993, 3033, 3048, 3132, 3166, 3330, 3346, 3417, 3457, 3505, 3573, 3599, 367, 3691, 3839, 4009, 4013, 4151, 4192, 4219, 4305, 4548, 4799, 4862, 4866, 4869, 4976, 5190, 5401, 5452, 5477, 5553, 5938, 5945, 6041, 6099, 6132, 6163, 6437, 6524, 6780, 6801, 6888, 7101, 7187, 7220, 7228, 7346, 7387, 7546, 7762, 7981, 7983, 8120}
	if brokenSearchV2(arr, 9220) != 9 {
		println("test 5 error")
	} else {
		println("test 5 OK")
	}

	arr = []int{3271, 3298, 3331, 3397, 3407, 3524, 3584, 3632, 3734, 3797, 3942, 4000, 4180, 4437, 4464, 4481, 4525, 4608, 4645, 4803, 4804, 4884, 4931, 4965, 5017, 5391, 5453, 5472, 5671, 5681, 5959, 6045, 6058, 6301, 6529, 6621, 6961, 7219, 7291, 7372, 7425, 7517, 7600, 7731, 7827, 7844, 7987, 8158, 8169, 8265, 8353, 8519, 8551, 8588, 8635, 9209, 9301, 9308, 9336, 9375, 9422, 9586, 9620, 9752, 9776, 9845, 9906, 9918, 16, 25, 45, 152, 199, 309, 423, 614, 644, 678, 681, 725, 825, 830, 936, 1110, 1333, 1413, 1617, 1895, 1938, 2107, 2144, 2184, 2490, 2517, 2769, 2897, 2970, 3023, 3112, 3156}
	if brokenSearchV2(arr, 25) != 69 {
		println("test 6 error")
	} else {
		println("test 6 OK")
	}
	arr = []int{1}
	if brokenSearchV2(arr, 1) != 0 {
		println("test 7 error")
	} else {
		println("test 7 OK")
	}
	arr = []int{1, 5}
	if brokenSearchV2(arr, 1) != 0 {
		println("test 8 error")
	} else {
		println("test 8 OK")
	}

	arr = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0}
	if brokenSearchV2(arr, 1) != 0 {
		println("test 9 error")
	} else {
		println("test 9 OK")
	}
}

func Final1V2() {
	testFinal1V2()
}
